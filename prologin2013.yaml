conf:
    package_name: prologin2013
    player_lib: champion
    player_filename: prologin

constant:
  -
    cst-name: REVENU_ILE
    cst-val: 100
    cst-comment: Revenu en or par île à chaque tour
  -
    cst-name: REVENU_VOLCAN
    cst-val: 200
    cst-comment: Revenu en or par volcan à chaque tour
  -
    cst-name: CARAVELLE_COUT
    cst-val: 25
    cst-comment: Coût de construction d'une Caravelle
  -
    cst-name: GALION_COUT
    cst-val: 10
    cst-comment: Coût de construction d'un Galion
  -
    cst-name: CARAVELLE_DEPLACEMENT
    cst-val: 4
    cst-comment: Déplacement de la Caravelle
  -
    cst-name: GALION_DEPLACEMENT
    cst-val: 6
    cst-comment: Déplacement du Galion


enum:
  -
    enum_name: bateau_type
    enum_summary: "Type de bateau"
    enum_field:
      - [bateau_caravelle, "Caravelle"]
      - [bateau_galion, "Galion"]
      - [bateau_erreur, "Bateau inexistant"]
  -
    enum_name: terrain
    enum_summary: "Type de terrain"
    enum_field:
      - [terrain_ile, "Île"]
      - [terrain_volcan, "Volcan"]
      - [terrain_mer, "Mer"]
      - [terrain_recif, "Récif"]
      - [terrain_erreur, "Erreur, case impossible"]
  -
    enum_name: erreur
    enum_summary: "Erreurs possibles"
    enum_field:
      - [or_insuffisant, "Vous ne possédez pas assez d'or pour cette action."]
      - [ile_invalide, "La position spécifiée n'est pas une île."]
      - [chemin_invalide, "Le chemin spécifié n'est pas valide."]
      - [bateaux_insuffisants,
            "Il n'y a pas assez de bateaux de ce type sur la case spécifiée"]
      - [ile_colonisee, "L'île est déjà colonisée"]
      - [aucune_caravelle,
            "Il n'y a aucune caravelle susceptible de coloniser l'île"]


struct:
  -
    str_name: position
    str_summary: Représente la position sur la carte
    str_tuple: yes
    str_field:
      - [x, int, "Coordonnée en X"]
      - [y, int, "Coordonnée en Y"]
  -
    str_name: bateau
    str_summary: Représente un bateau
    str_tuple: no
    str_field:
      - [id, int, "Identifiant unique du bateau"]
      - [pos, position, "Position"]
      - [equipe, int, "Équipe"]
      - [type, bateau_type, "Type"]
      - [or, int, "Or contenu dans le bateau"]
      - [deplacable, bool, "Le bateau n'a pas encore été déplacé ce tour-ci"]
      - [vivant, bool, "Le bateau est encore à flots"]

function:

# Carte
  -
    fct_name: taille_carte
    fct_summary: Retourne la taille de la carte.
    fct_ret_type: position
    fct_arg: []
  -
    fct_name: info_terrain
    fct_summary:
      Retourne la nature du terrain désigné par ``pos``.
    fct_ret_type: terrain
    fct_arg:
      - [pos, position, "Position"]
  -
    fct_name: info_ile_type
    fct_summary:
      Retourne le type d'île à l'emplacement ``pos``.
    fct_ret_type: ile_type
    fct_arg:
      - [pos, position, "Position"]
  -
    fct_name: info_ile_equipe
    fct_summary:
      "Retourne l'équipe qui possède l'île à l'emplacement ``pos``.
       Retourne 0 si l'île est libre.
       Retourne -1 si la position indiquée n'est pas une île"
    fct_ret_type: int
    fct_arg:
      - [pos, position, "Position"]
  -
    fct_name: info_ile_or
    fct_summary:
      "Retourne l'or contenu sur l'île à l'emplacement ``pos``.
       Retourne 0 si la case spécifiée n'est pas une île."
    fct_ret_type: int
    fct_arg:
      - [pos, position, "Position"]
  -
    fct_name: info_bateau
    fct_summary:
      "Retourne le bateau ayant pour identifiant ``id``"
    fct_ret_type: bateau
    fct_arg:
      - [id, int, "Identifiant"]
  -
    fct_name: liste_bateaux_position
    fct_summary:
      "Retourne la liste de bateaux à la position ``pos``"
    fct_ret_type: bateau array
    fct_arg:
      - [pos, position, "Position"]
  -
    fct_name: liste_id_bateaux_position
    fct_summary:
      "Retourne la liste des ID des bateaux à la position ``pos``"
    fct_ret_type: int array
    fct_arg:
      - [pos, position, "Position"]
  -
    fct_name: liste_iles
    fct_summary:
      "Retourne la liste des positions des îles"
    fct_ret_type: position array
    fct_arg: []
  -
    fct_name: chemin
    fct_summary:
      "Retourne une liste de positions correspondant au plus court chemin d'un
      point à un autre en passant seulement par des cases accessibles"
    fct_ret_type: position array
    fct_arg: []

# Actions
  -
    fct_name: construire
    fct_summary:
      "Construire un bateau de type ``btype`` sur l'île à la position ``pos``"
    fct_ret_type: erreur
    fct_arg:
      - [btype, bateau_type, "Type de bateau à construire"]
      - [pos, position, "Position"]
  -
    fct_name: deplacer
    fct_summary:
      "Déplace le bateau représenté par l'identifiant ``id`` suivant une liste
      ``liste_pos`` de positions"
    fct_ret_type: erreur
    fct_arg:
      - [id, int, "Identifiant du bateau"]
      - [liste_pos, position array, "Liste de positions"]
  -
    fct_name: coloniser
    fct_summary:
      "Colonise l'île à la position ``pos``"
    fct_ret_type: erreur
    fct_arg:
      - [pos, position, "Position de l'île à coloniser"]
  -
    fct_name: charger
    fct_summary:
      "Charge la caravelle identifiée par ``id`` de ``nb_or`` d'or."
    fct_ret_type: erreur
    fct_arg:
      - [id, int, "Identifiant de la caravelle"]
      - [nb_or, int, "Quantité d'or à charger"]
  -
    fct_name: decharger
    fct_summary:
      "Décharge la caravelle identifiée par ``id`` de ``nb_or`` d'or."
    fct_ret_type: erreur
    fct_arg:
      - [id, int, "Identifiant de la caravelle"]
      - [nb_or, int, "Quantité d'or à décharger"]


# Autre
  -
    fct_name: mon_joueur
    fct_summary: Retourne le numéro de votre joueur
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: scores
    fct_summary: Retourne les scores de chaque joueur
    fct_ret_type: int array
    fct_arg: []
  -
    fct_name: tour_actuel
    fct_summary: Retourne le numéro du tour actuel
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: nombre_tours
    fct_summary:
      Retourne le nombre total de tours de toute la partie
    fct_ret_type: int
    fct_arg: []


user_function:
  -
    fct_name: partie_init
    fct_summary: Fonction appellée au début de la partie
    fct_ret_type: void
    fct_arg: []
  -
    fct_name: partie_tour
    fct_summary: Fonction appellée à chaque tour
    fct_ret_type: void
    fct_arg: []
  -
    fct_name: partie_fin
    fct_summary: Fonction appellée à la fin de la partie
    fct_ret_type: void
    fct_arg: []
